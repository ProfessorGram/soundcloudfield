<?php

define('SOUNDCLOUDFIELD_DEFAULT_WIDTH', 100);
define('SOUNDCLOUDFIELD_DEFAULT_HEIGHT', 81);
define('SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT', 305);

/**
 * Implements hook_field_info().
 */
function soundcloudfield_field_info() {
  return array(
    'soundcloud' => array(
      'label' => t('SoundCloud'),
      'description' => t('This field stores a SoundCloud track or set URL.'),
      'instance_settings' => array(
        'width'         => SOUNDCLOUDFIELD_DEFAULT_WIDTH,
        'height'        => SOUNDCLOUDFIELD_DEFAULT_HEIGHT,
        'set_height'    => SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT,
        'autoplay'      => FALSE,
        'showcomments'  => FALSE,
        'showplaycount' => FALSE,
        'showartwork'   => FALSE,
        'color'         => 'ff7700',
      ),
      'default_widget'    => 'soundcloud_url',
      'default_formatter' => 'soundcloud_default',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function soundcloudfield_field_schema($field) {
  if ($field['type'] == 'soundcloud') {
    $schema['columns']['url'] = array(
      'type'      => 'varchar',
      'length'    => 255,
      'not null'  => FALSE,
    );

    return $schema;
  }
}

/**
 * Implements hook_field_validate().
 *
 * Pseudo-hook.
 */
function soundcloudfield_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'soundcloud') {
    foreach ($items as $delta => $item) {
      if (!empty($item['url']) && !preg_match('@^http://soundcloud\.com/([^"\&]+)@i', $item['url'], $matches)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error'   => 'soundcloudfield_invalid_url',
          'message' => t('%url is not a valid SoundCloud URL.', array('%url' => $item['url'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * Pseudo-hook.
 */
function soundcloudfield_field_is_empty($item, $field) {
  if ($field['type'] == 'soundcloud') {
    if (empty($item['url'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 *
 * Pseudo-hook.
 */
function soundcloudfield_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  if ($field['type'] == 'soundcloud') {
    $form['player'] = array(
      '#type'         => 'fieldset',
      '#title'        => t('SoundCloud settings'),
      '#collapsible'  => TRUE,
      '#collapsed'    => FALSE,
    );
    $form['player']['width'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Width'),
      '#size'           => 4,
      '#default_value'  => empty($settings['player']['width']) ? SOUNDCLOUDFIELD_DEFAULT_WIDTH : $settings['player']['width'],
      '#description'    => t('Player width. Default is @width.', array('@width' => SOUNDCLOUDFIELD_DEFAULT_WIDTH)),
      '#required'       => TRUE,
    );
    $form['player']['height'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Height for tracks'),
      '#size'           => 4,
      '#default_value'  => empty($settings['player']['height']) ? SOUNDCLOUDFIELD_DEFAULT_HEIGHT : $settings['player']['height'],
      '#description'    => t('Player height for tracks. Default is @height.', array('@height' => SOUNDCLOUDFIELD_DEFAULT_HEIGHT)),
      '#required'       => TRUE,
    );
    $form['player']['set_height'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Height for sets'),
      '#size'           => 4,
      '#default_value'  => empty($settings['player']['set_height']) ? SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT : $settings['player']['set_height'],
      '#description'    => t('Player height for sets. Default is @height.', array('@height' => SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT)),
      '#required'       => TRUE,
    );
    $form['player']['showcomments'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show comments'),
      '#default_value'  => empty($settings['player']['showcomments']) ? FALSE : $settings['player']['showcomments'],
      '#description'    => t('Show comments in player'),
    );
    $form['player']['autoplay'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Autoplay'),
      '#default_value'  => empty($settings['player']['autoplay']) ? FALSE : $settings['player']['autoplay'],
      '#description'    => t('Player autoplay'),
    );
    $form['player']['showplaycount'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show play count'),
      '#default_value'  => empty($settings['player']['showplaycount']) ? FALSE : $settings['player']['showplaycount'],
      '#description'    => t('Show play count in player'),
    );
    $form['player']['showartwork'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show artwork'),
      '#default_value'  => empty($settings['player']['showartwork']) ? FALSE : $settings['player']['showartwork'],
      '#description'    => t('Show artwork in player'),
    );
    $form['player']['color'] = array(
      '#type'           => module_exists('jquery_colorpicker') ? 'jquery_colorpicker' : 'textfield',
      '#title'          => t('Player color'),
      '#default_value'  => empty($settings['player']['color']) ? 'ff7700' : $settings['player']['color'],
      '#required'       => TRUE,
      '#description'    => t('Player color in hexadecimal format. Default is ff7700. Turn on the jQuery Colorpicker module if available. '),
    );
  }

  return $form;
}

/**
 * Implements hook_widget_info().
 */
function soundcloudfield_field_widget_info() {
  return array(
    'soundcloud_url' => array(
      'label'       => t('SoundCloud URL'),
      'field types' => array('soundcloud'),
      'behaviors'   => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value'   => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Pseudo-hook.
 */
function soundcloudfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;

  if ($instance['widget']['type'] == 'soundcloud_url') {
    $element['url'] = array(
      '#type'           => 'textfield',
      '#title'          => t('SoundCloud URL'),
      '#default_value'  => isset($items[$delta]['url']) ? $items[$delta]['url'] : NULL,
      '#description'    => t('Please enter a valid SoundCloud track or set URL.')
    ) + $base;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function soundcloudfield_field_formatter_info() {
  return array(
    'soundcloud_default' => array(
      'label'       => t('Player'),
      'field types' => array('soundcloud'),
    ),
    'soundcloud_link' => array(
      'label'       => t('Link'),
      'field types' => array('soundcloud'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function soundcloudfield_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $instance['settings']['player'];

  switch ($display['type']) {

    case 'soundcloud_default':
      foreach ($items as $delta => $item) {
        $output = '';

        $encoded_url = urlencode($item['url']);
        $parsed_url = parse_url($item['url']);

        $showcomments = ($settings['showcomments']) ? 'true' : 'false';
        $autoplay = ($settings['autoplay']) ? 'true' : 'false';
        $showplaycount = ($settings['showplaycount']) ? 'true' : 'false';
        $showartwork = ($settings['showartwork']) ? 'true' : 'false';

        $params_track = 'url=' . $encoded_url .
                        '&amp;show_comments=' . $showcomments .
                        '&amp;auto_play=' . $autoplay .
                        '&amp;color=' . $settings['color'];
//                      '&amp;color=' . str_replace('#', '', $settings['color']);

        $params_set = 'url=' . $encoded_url .
                      '&amp;show_comments=' . $showcomments .
                      '&amp;auto_play=' . $autoplay .
                      '&amp;show_playcount=' . $showplaycount .
                      '&amp;show_artwork=' . $showartwork .
                      '&amp;color=' . $settings['color'];
//                    '&amp;color=' . str_replace('#', '', $settings['color']);

        $splitted_url = explode("/", $parsed_url['path']);

        if ($splitted_url[2] != 'sets') {
          $output = '<object height="' . $settings['height'] . '" width="' . $settings['width'] . '%"><param name="movie" value="https://player.' . $parsed_url['host'] . '/player.swf?' . $params_track . '"></param>';
          $output .= '<param name="allowscriptaccess" value="always"></param><embed allowscriptaccess="always" height="' . $settings['height'] . '" src="https://player.' . $parsed_url['host'] . '/player.swf?' . $params_track . '" type="application/x-shockwave-flash" width="' . $settings['width'] . '%"></embed></object>';
        } else {
          $output = '<object height="' . $settings['set_height'] . '" width="' . $settings['width'] . '%"><param name="movie" value="https://player.' . $parsed_url['host'] . '/player.swf?' . $params_set . '"></param>';
          $output .= '<param name="allowscriptaccess" value="always"></param><embed allowscriptaccess="always" height="' . $settings['set_height'] . '" src="https://player.' . $parsed_url['host'] . '/player.swf?' . $params_set . '" type="application/x-shockwave-flash" width="' . $settings['width'] . '%"></embed></object>';
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'soundcloud_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => l($item['url'], $item['url']));
      }
      break;
  }

  return $element;
}

/**
 * Implement hook_field_error().
 */
function soundcloudfield_field_widget_error($element, $error) {
  switch ($error['error']) {
    case 'soundcloudfield_invalid_url':
      form_error($element, $error['message']);
	  break;
  }
}