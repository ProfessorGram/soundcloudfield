<?php

define('SOUNDCLOUDFIELD_DEFAULT_WIDTH', 100);
define('SOUNDCLOUDFIELD_DEFAULT_HEIGHT', 81);
define('SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT', 305);

//==========================================//
// DEFINING A FIELD
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function soundcloudfield_field_info() {
  return array(
    'soundcloudfield' => array(
      'label' => t('SoundCloud'),
      'description' => t('This CCK field stores a SoundCloud track or set URL.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function soundcloudfield_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
        $columns = array(
          'embed' => array(
            'type' => 'varchar',
            'length' => 255,
            'not null' => FALSE,
            'sortable' => TRUE
          ),
        );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function soundcloudfield_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
            // $field tomb itt elerheto
          if (!empty($item['embed']) && !preg_match('@^http://soundcloud\.com/([^"\&]+)@i', $item['embed'], $matches)) {
            form_set_error($field['field_name'],t('"%url" is not a valid SoundCloud URL',array('%url' =>  $item['embed'])));
          }
        }
      }
      break;
  }
}

/**
 *  Implementation of hook_content_is_empty()
 */
function soundcloudfield_content_is_empty($item, $field) {
  return empty($item['embed']);             
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implementation of hook_widget_info().
 */
function soundcloudfield_widget_info() {
  return array(
    'soundcloud_url' => array(
      'label' => t('SoundCloud URL'),
      'field types' => array('soundcloudfield'),
      'multiple values' => CONTENT_HANDLE_CORE, // or 'CONTENT_HANDLE_MODULE'
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_NONE, // == no default value, else CONTENT_CALLBACK_CUSTOM
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function soundcloudfield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array(); 
      if ($widget['type'] == 'soundcloud_url') {

        $width = variable_get('soundcloudfield_default_width', SOUNDCLOUDFIELD_DEFAULT_WIDTH);
        $height = variable_get('soundcloudfield_default_height', SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT);
        $setheight = variable_get('soundcloudfield_default_setheight', SOUNDCLOUDFIELD_DEFAULT_SET_HEIGHT);

        $form['player'] = array(
          '#type' => 'fieldset',
          '#title' => t('Soundcloud set settings'),
          '#description' => t('Soundcloud set settings'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );

        $form['player']['width'] = array(
          '#type' => 'textfield',
          '#title' => t('Player display width'),
          '#default_value' => empty($widget['width']) ? $width : $widget['width'],
          '#required' => TRUE,
          '#description' => t('Player width. Default is @width.', array('@width' => $width)),
        );

        $form['player']['height'] = array(
          '#type' => 'textfield',
          '#title' => t('Player display height'),
          '#default_value' => empty($widget['height']) ? $height : $widget['height'],
          '#required' => TRUE,
          '#description' => t('Player height. Default is @height.', array('@height' => $height)),
        );

        $form['player']['setheight'] = array(
          '#type' => 'textfield',
          '#title' => t('Player display height'),
          '#default_value' => empty($widget['height']) ? $height : $widget['height'],
          '#required' => TRUE,
          '#description' => t('Player height. Default is @height.', array('@height' => $height)),
        );

        $form['player']['autoplay'] = array(
          '#type' => 'checkbox',
          '#title' => t('Autoplay'),
          '#default_value' => empty($widget['autoplay']) ? '' : $widget['autoplay'],
          '#description' => t('Player autoplay'),
        );

        $form['player']['showcomments'] = array(
          '#type' => 'checkbox',
          '#title' => t('Show comments'),
          '#default_value' => empty($widget['showcomments']) ? '' : $widget['showcomments'],
          '#description' => t('Showing comment in player'),
        );

        $form['player']['showplaycount'] = array(
          '#type' => 'checkbox',
          '#title' => t('Show play count'),
          '#default_value' => empty($widget['showplaycount']) ? '' : $widget['showplaycount'],
          '#description' => t('Show play count in player'),
        );

         $form['player']['showartwork'] = array(
          '#type' => 'checkbox',
          '#title' => t('Show artwork'),
          '#default_value' => empty($widget['showartwork']) ? '' : $widget['showartwork'],
          '#description' => t('Show artwork in player'),
        );   

        $form['player']['color'] = array(
          '#type' => (module_exists('colorpicker') ? 'colorpicker_' : '') . 'textfield',
          '#title' => t('Player color'),
          '#default_value' => empty($widget['color']) ? '#000000' : $widget['color'],
          '#required' => TRUE,
          '#description' => t('Player color.'),
        );
      }

      return $form;

    case 'validate':
      if (!is_numeric($widget['width']) || intval($widget['width']) != $widget['width'] || $widget['width'] < 1) {
        form_set_error('width', t('"Player width" must be a positive integer.'));
      }
      if (!is_numeric($widget['height']) || intval($widget['height']) != $widget['height'] || $widget['height'] < 1) {
        form_set_error('height', t('"Player height" must be a positive integer.'));
      }
    // a parameterek a $field['widget'] tombben lesznek
     
    case 'save':
      if ($widget['widget_type'] == 'soundcloud_url') {
        return array('width', 'height', 'autoplay', 'showcomments', 'showplaycount', 'showartwork', 'color', 's_set'=>TRUE);
      }
  }
}

/**
 * Implementation of hook_elements().
 */
function soundcloudfield_elements() {
  return array(
    'soundcloud_url' => array( // widget name
      '#input' => TRUE,
      '#columns' => array('embed'),
      '#delta' => 0,
      '#process' => array('soundcloudfield_process'),
    ),     
  );
}

/**
 * Implementation of hook_widget().
 * 
 * amikor a CCK hozzaadja a mezonket az urlaphoz, tudatjuk vele, hogy allitsa be a megfelelo widget tipust es az alapertelmezett erteket, ha az letezik
 */
function soundcloudfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL, 
  );
  return $element;
}

/**
 * Process an individual element. Build the form element.
 * 
 * #element['#value'] is already set
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']]
 */

function soundcloudfield_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];    // $field_key = 'embed'
  $delta = $element['#delta'];
 
  // szoveges beviteli mezo 
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,

    '#title' => $element['#title'],
    '#description' => 'Here you can type the URL of the Soundcloud track or set, depending on what field type do you use',
    '#required' => $element['#required'],
    '#maxlength' => 255,
  );
  return $element;
}


//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
function soundcloudfield_theme() {
  return array(
    'soundcloud_url' => array(
      'arguments' => array('element' => NULL),
    ),
    'soundcloudfield_set' => array(
      'arguments' => array('element' => NULL),
    ),
    'soundcloudfield_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function soundcloudfield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Flash player'),
      'field types' => array('soundcloudfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'html5' => array(
      'label' => t('HTML5 player'),
      'field types' => array('soundcloudfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'link' => array(
      'label' => t('Link'),
      'field types' => array('soundcloudfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of theme_formatter_default
 */
function theme_soundcloudfield_formatter_default($element) {
  $output = '';

  if (!empty($element['#item']['embed'])) {
    $field_info = soundcloudfield_get_content_node_field_instance_by_field_name($element['#field_name']);  // adatbazisbol kinyerjuk a widget beallitasait, ehhez egy fgv-t hasznalunk
 
    if ($field_info['widget_type'] == 'soundcloud_url') {
      $field_info['widget_settings'] = unserialize($field_info['widget_settings']);
      $field_info['widget_settings']['showcomments'] = $field_info['widget_settings']['showcomments'] ? 'true' : 'false';
      $field_info['widget_settings']['autoplay'] = $field_info['widget_settings']['autoplay'] ? 'true' : 'false';
      $field_info['widget_settings']['showplaycount'] = $field_info['widget_settings']['showplaycount'] ? 'true' : 'false';
      $field_info['widget_settings']['showartwork'] = $field_info['widget_settings']['showartwork'] ? 'true' : 'false';
      
      $width = $field_info['widget_settings']['width'];
      $height = $field_info['widget_settings']['height'];;
  
      $encoded_url = urlencode($element['#item']['embed']);
      $parsed_url = parse_url($element['#item']['embed']);
      $params = 'url=' . $encoded_url .
                '&amp;show_comments=' . $field_info['widget_settings']['showcomments'] .
      					'&amp;auto_play=' . $field_info['widget_settings']['autoplay'] .
                '&amp;show_playcount=' . $field_info['widget_settings']['showplaycount'] .
      					'&amp;show_artwork=' . $field_info['widget_settings']['showartwork'] .
      					'&amp;color=' . str_replace('#', '', $field_info['widget_settings']['color']);

      $output .= '<object height="' . $height . '" width="' . $width . '%"><param name="movie" value="http://player.' . $parsed_url['host'] . '/player.swf?' . $params . '"></param>';
      $output .= '<param name="allowscriptaccess" value="always"></param><embed allowscriptaccess="always" height="' . $height . '" src="http://player.' . $parsed_url['host'] . '/player.swf?' . $params . '" type="application/x-shockwave-flash" width="' . $width . '%"></embed></object>';
    }
       
    return $output;
  }
  else {
    return NULL;
  }
}

function theme_soundcloud_url($element) {
  return $element['#children'];
}

function theme_soundcloudfield_set($element) {
  return $element['#children'];
}

/**
 * Get the field instance by field name.
 *
 * Get field data from database.
 *
 * @param string $field_name
 * @return array with a row of content_node_field_instance table
 * 
 */
function soundcloudfield_get_content_node_field_instance_by_field_name($field_name) {
  return db_fetch_array(db_query("SELECT * FROM {content_node_field_instance} WHERE field_name = '%s'", $field_name));
}